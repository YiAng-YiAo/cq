--怪物时间调用函数定义

MonsterActionTimer = {} ;
MonsterActionTimer.timeCall = {}

MonsterActionTimer.dispatch = function(funcType, pMonster, p1, p2, p3, p4, p5)
	if pMonster == nil or funcType == nil then
		return ;
	end
	local timeCall = MonsterActionTimer.timeCall[funcType] ;
	if timeCall == nil then
		print("[ timeCall ] is not config !");
		return ;
	end

	timeCall( pMonster, p1, p2, p3, p4, p5 );
end

MonsterActionTimer.timeCall[1] = function(pMonster, monId, actionId, info_pos, itemId )
	local events = MonsterActionImpl.EventCalls
	if events == nil then
		print( "timeCall impossible !");
		return ;
	end
	local action = Actions[actionId] ;
	if action == nil then
		print( "timeCall can't find action:"..actionId )
		return ;
	end
	local infos = action.infos	--这里可能是配置配错了，可能不用判断
	if infos == nil or infos[info_pos] == nil then
		print( "timeCall can't find infos:"..actionId..",".. info_pos );
		return ;
	end

	local squeInfo = infos[info_pos].sequence ;
	if squeInfo == nil then
		print( "timeCall can't find sequence:"..actionId .. "," .. info_pos ) ;
		return ;
	end

	local item = squeInfo[itemId] ;
	if item == nil then
		print( "timeCall can't find item:" .. actionId .. "," .. info_pos ..  "," .. itemId);
		return ;
	end

	--全部调用完
	for i=1, #item.items do
		local op = item.items[i] ;
		local eventCall = events[op.type] ;
		if eventCall ~= nil then
			eventCall( pMonster, monId, op) ;
		end
	end
end

MonsterActionTimer.timeCall[2] = function(pMonster,actionType,EffectConfigId,EffectRange,BeforeEffectConfigId )
	local pScene = LActor.getScenePtr(pMonster);
	--print("[ MonsterActionFunc.MonsterTianhuoTimerFunc ]")
	if pScene == nil then
		return ;
	end
	if actionType == 1 then
		MonsterActionFunc.MonsterTianhuoCrashActor(pScene, actionType, EffectConfigId, 0, BeforeEffectConfigId);
	else
		local effectRange = EffectRange or 1 ;
		MonsterActionFunc.MonsterTianhuoRandomCrash(pScene, actionType, EffectConfigId, EffectRange);
	end
end

MonsterActionTimer.timeCall[3] = function(pMonster, BuffConfigId)
	local actorPtr = LuaHelp.getSceneActorList(pMonster);
	if actorPtr == nil then
		return ;
	end

	local x, y = LActor.getEntityPosition(pMonster)

	for i=1, #actorPtr do
		LActor.catchTargetToXY( actorPtr, x, y);
	end
end


MonsterActionTimer.timeCall[4] = function(pMonster, monId, actionId, itemId )
	local events = MonsterActionImpl.EventCalls
	if events == nil then
		print( "timeCall impossible !");
		return ;
	end
	local action = Actions[actionId] ;
	if action == nil then
		print( "timeCall can't find action:"..actionId )
		return ;
	end
	if action.isInit ~= nil and action.isInit ~= 1 then
		print( "timeCall can't find action isInit:" .. actionId);
		return ;
	end
	if action.initSequence == nil then
		print( "timeCall can't find initSequence:" .. actionId);
		return ;
	end
	local item = action.initSequence[itemId];
	if item == nil then
		print( "timeCall can't find infos:"..actionId..",".. itemId );
	end
	--全部调用完
	for i=1, #item.items do
		local op = item.items[i] ;
		local eventCall = events[op.type] ;
		if eventCall ~= nil then
			eventCall( pMonster, monId, op) ;
		end
	end
end

MonsterActionTimer.timeCall[5] = function(pMonster, x, y, EffectRange, addBuffConfigId)
	MonsterActionFunc.MonsterBlackHallTimerFunc(pMonster, x, y, EffectRange, addBuffConfigId);
end

MonsterActionTimer.timeCall[6] = function(pMonster, x, y, EffectRange, damage, addBuffConfigId)
	local actor_ptr = LuaHelp.getSceneActorList(pMonster);
	if actor_ptr == nil or #actor_ptr < 1 then
		return ;
	end
	local count = 0 ;
	local curr_x = 0 ;
	local curr_y = 0 ;
	local damageActor = {} ;
	for i=1, #actor_ptr do
		curr_x, curr_y = LActor.getEntityPosition(actor_ptr[i])
		if MonsterActionFunc.isInRange(curr_x, curr_y, x, y, EffectRange) == true then
			count = count + 1;
			--放入到分摊伤害列表
			table.insert(damageActor, actor_ptr[i]) ;
		end
	end
	--不足3人，对怪物加buff
	if count < 3 then
		local buffInfo = getActionBuffConfigByIndex(addBuffConfigId);
		MonsterActionFunc.addBuffByActionBuffConfig(pMonster,buffInfo);
	end

	--站里面的人分摊伤害
	if count > 0 then
		local realDamage = damage / count ;
		for k, actor in ipairs(damageActor) do
			LActor.changeHp(actor, -realDamage);
		end
	end
end

MonsterActionTimer.timeCall[7] = function(pMonster, x, y, EffectRange, addBuffConfigId)
	local actor_ptr = LuaHelp.getSceneActorList(pMonster);
	if actor_ptr == nil or #actor_ptr < 1 then
		return ;
	end
	local buffInfo = getActionBuffConfigByIndex(addBuffConfigId);
	local curr_x = 0 ;
	local curr_y = 0 ;
	for i=1, #actor_ptr do
		curr_x , curr_y = LActor.getEntityPosition(actor_ptr[i])
		if MonsterActionFunc.isInRange( curr_x, curr_y, x, y, EffectRange) == true then
			MonsterActionFunc.addBuffByActionBuffConfig(actor_ptr[i], buffInfo);
		end
	end
end

MonsterActionTimer.timeCall[8] = function(pMonster, x, y, EffectRange, addBuffConfigId)
	print("MonsterActionTimer.timeCall[8]");
	local curr_x , curr_y = LActor.getEntityPosition(pMonster)
	if MonsterActionFunc.isInRange( curr_x, curr_y, x, y, EffectRange) == true then
		local buffInfo = getActionBuffConfigByIndex(addBuffConfigId);
		if buffInfo == nil or buffInfo.buffs == nil then
			return ;
		end
		for i=1, #buffInfo.buffs do
			if LActor.hasBuff(pMonster, buffInfo.buffs[i].buffType, buffInfo.buffs[i].groupId) == true then
				local timeOverlay = buffInfo.buffs[i].timeOverlay or false ;
				local valueOverlay = buffInfo.buffs[i].valueOverlay or false ;
				--todo buff修改
				-- LActor.addBuff(pMonster, buffInfo.buffs[i].buffType, buffInfo.buffs[i].groupId, buffInfo.buffs[i].value, buffInfo.buffs[i].times, buffInfo.buffs[i].interval, buffInfo.buffs[i].buffName, timeOverlay, pMonster, 0, valueOverlay);
			end
		end
	end
end

-- 篝火怪定时检查
MonsterActionTimer.timeCall[9] = function(pMonster, x, y, EffectRange, addBuffConfigId)
	YhdMon.onTimeCheck(pMonster)
end

MonsterActionTimer.timeCall[10] = function(pMonster, x, y, EffectRange, damage )
	local actor_ptr = LuaHelp.getSceneActorList(pMonster);
	if actor_ptr == nil or #actor_ptr < 1 then
		return ;
	end
	local count = 0 ;
	local curr_x = 0 ;
	local curr_y = 0 ;
	local totalDamageActor = {}
	local damageActor = {} ;
	for i=1, #actor_ptr do
		curr_x, curr_y = LActor.getEntityPosition(actor_ptr[i])
		if MonsterActionFunc.isInRange(curr_x, curr_y, x, y, EffectRange) == true then
			count = count + 1;
			--放入到分摊伤害列表
			table.insert(damageActor, actor_ptr[i]) ;
		else
			table.insert(totalDamageActor, actor_ptr[i]);
		end
	end
	--分摊伤害
	if count > 0 then
		local realDamage = damage / count ;
		for k, actor in ipairs(damageActor) do
			LActor.changeHp(actor, -realDamage);
		end
	end
	--全部伤害
	for k,actor in ipairs(totalDamageActor) do
		LActor.changeHp(actor, -damage);
	end
end